nsim <- 100
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
X <- cbind(rep(0, nsim), t(apply(X, 1, cumsum)))
plot(t, X[1, ], xlab = "time", ylab = "phenotype", ylim = c(-2, 2), type = "l")
apply(X[2:nsim, ], 1, function(x, t) lines(t, x), t = t)
t <- 0:100  # time
sig2 <- 0.01
## first, simulate a set of random deviates
x <- rnorm(n = length(t) - 1, sd = sqrt(sig2))
## now compute their cumulative sum
x <- c(0, cumsum(x))
plot(t, x, type = "l", ylim = c(-2, 2))
nsim <- 100
X <- matrix(rnorm(n = nsim * (length(t) - 1), sd = sqrt(sig2)), nsim, length(t) -
1)
X <- cbind(rep(0, nsim), t(apply(X, 1, cumsum)))
plot(t, X[1, ], xlab = "time", ylab = "phenotype", ylim = c(-2, 2), type = "l")
apply(X[2:nsim, ], 1, function(x, t) lines(t, x), t = t)
require("fOptions")
install.packages("fOptions")
require("fOptions")
install.packages("fExoticOptions")
require("fExoticOptions")
StandardBarrierOption(cdi,S=100,X=110,K=120,Time = 1,r=0.01,b=0,sigma = 0.3)
StandardBarrierOption("cdi",S=100,X=110,K=120,Time = 1,r=0.01,b=0,sigma = 0.3)
StandardBarrierOption("cdi",S=100,X=110,H=120,Time = 1,r=0.01,b=0,sigma = 0.3)
StandardBarrierOption("cdi",S=100,X=110,H=120,K=0,Time = 1,r=0.01,b=0,sigma = 0.3)
StandardBarrierOption("cdi",S=100,X=110,H=120,K=0,Time = 0.01,r=0.01,b=0,sigma = 0.3)
S=seq(80,200,5)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=0,Time = 0.01,r=0.01,b=0,sigma = 0.3)
x$price
x@price
plot(S,x@price)
require("fOptions")
require("fExoticOptions")
S=seq(80,200,1)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=0,Time = 0.01,r=0.01,b=0,sigma = 0.3)
plot(S,x@price)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=0,Time = 0.01,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=0,Time = 1,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=0,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=100,K=0,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=100,K=110,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cdi",S=S,X=110,H=120,K=110,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cui",S=S,X=110,H=120,K=110,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cui",S=S,X=110,H=120,K=o,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cui",S=S,X=110,H=120,K=0,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cuo",S=S,X=110,H=120,K=0,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
require("fOptions")
require("fExoticOptions")
S=seq(80,200,0.1)
x=StandardBarrierOption("cuo",S=S,X=110,H=120,K=10,Time = 0,r=0.01,b=0,sigma = 0.3)
plot(S,x@price,"l")
dev.off()
library(data.table); library(xtable); library(xts); library(nleqslv)
# =============================================================================================
# (0) PREAMBULE
# =============================================================================================
# [!!!] THE CODE ALSO PRINTS PDF CHARTS AND LATEX TABLES TO THE SOURCE FOLDER
library(data.table); library(xtable); library(xts); library(nleqslv)
Sys.setlocale(locale = 'English')
# =============================================================================================
# (1) BOOTSTRAP THE CURVE
# =============================================================================================
# Discount Curve
mat = matrix(0, 4, 4)
mat[1,2] = 100; mat[2,1] = 100.75; mat[3,1:3] = c(1.5,1.5,101.5); mat[4,c(2,4)] = c(2.5,102.5)
p = c(99.2, 100.5485, 100.1655, 100.0325)
colnames(mat) = paste0(c(3,6,9,12), 'm')
rownames(mat) = paste0('Bond ', 1:4)
D = solve(mat)%*%p
print(D)
# Yield curves
Rann = 100*(D^(-1/seq(0.25, 1, 0.25))-1)
Rcont = 100*(-log(D)/seq(0.25, 1, 0.25))
Rsemi  = 100*2*(D^(-1/(2*seq(0.25, 1, 0.25)))-1)
Rquart = 100*4*(D^(-1/(4*seq(0.25, 1, 0.25)))-1)
# Print result
tab = matrix(c(D, Rcont, Rquart, Rsemi, Rann), nrow = 5, ncol = 4, byrow = T)
colnames(tab) = c('3m', '6m', '9m', '12m')
rownames(tab) = c('Discount factor',
'Continuously compounded rate',
'Quarterly compounded rate',
'Semi-annually compounded rate',
'Annually compounded rate')
print(xtable(tab, align = c('l', rep('c',4)), digits = 4),
file = 'tabex1.tex', type = 'latex', floating = F)
# Plot results
pdf(file = 'ex1plot.pdf', width = 16, height = 9, pointsize = 18)
par(mfrow = c(1, 2), mar = c(4,4,2,1))
plot(x = seq(0.25, 1, 0.25), y = D, type = 'b', pch = 19, lwd = 3, col = 'blue',
xlab = 'Horizon', ylab = 'Discount factor', las = 1, main = 'Discount curve', xaxt = 'n')
axis(1, seq(0.25, 1, 0.25), paste0(c(3,6,9,12), 'm'))
plot(x = seq(0.25, 1, 0.25), y = Rann, type = 'b', pch = 19, lwd = 3, col = 'red',
xlab = 'Horizon', ylab = 'Interest rate, %', las = 1, main = 'Interest rate curve', xaxt = 'n')
axis(1, seq(0.25, 1, 0.25), paste0(c(3,6,9,12), 'm'))
lines(x = seq(0.25, 1, 0.25), y = Rcont, type = 'b', pch = 19, lwd = 3, col = 'black')
lines(x = seq(0.25, 1, 0.25), y = Rsemi, type = 'b', pch = 19, lwd = 3, col = 'blue')
lines(x = seq(0.25, 1, 0.25), y = Rquart, type = 'b', pch = 19, lwd = 3, col = 'green')
legend(legend = c('Continuous', 'Annual',
'Semi-annual', 'Quarterly'), bty = 'n', lty = 1, lwd = 3,
col = c('black', 'red', 'blue', 'green'), 'topleft')
dev.off()
# =============================================================================================
# (2) COMPUTE ACCRUED INTEREST
# =============================================================================================
t = Sys.Date()
cdates = seq(from = t, length.out = 4, by = '3 months')
timeline = seq(from = t, to = last(cdates), by = 'day')
accint = function(date, coup = 6, n = 3) {
lc = cdates[last(which(date>=cdates))]
nc = cdates[last(which(date>=cdates)) + 1]
adj = as.numeric(date-lc)/as.numeric(nc-lc)
coup/(12/3)*adj
}
accint = Vectorize(accint)
acc = as.xts(accint(timeline), order.by = timeline)
# Plot results
pdf(file = 'ex2plot.pdf', width = 16, height = 9, pointsize = 18)
par(mfrow = c(1,1))
plot(acc, lwd = 4, major.ticks = 'months', yaxis.right = F, grid.ticks.on = 'months',
format.labels = '%d\n%b', main = NULL)
dev.off()
# =============================================================================================
# (3) FIT NELSON-SIEGEL
# =============================================================================================
# given discount curve
df = data.table(Tt = seq(0.5, 4, 0.5), Z = c(0.9780, 0.9460, 0.9140, 0.8830,
0.8545, 0.8275, 0.8024, 0.7791))
# compute compounded rates
df[, r := -log(Z)/Tt]
# define the curve-fitting functional
rfit = function(x) {
sum(df[, (x[1] + (x[2] + x[3])*(1-exp(-Tt/x[4]))/(Tt/x[4]) - x[3]*exp(-Tt/x[4]) - r)^2])
}
# optimize it
x = optim(c(rep(0, 3), 0.5), fn = rfit, method = 'Nelder-Mead')$par
# extend to 10 years
Tt_ext = seq(4.5, 10, 0.5)
r_ext  = x[1] + (x[2] + x[3])*(1-exp(-Tt_ext/x[4]))/(Tt_ext/x[4]) - x[3]*exp(-Tt_ext/x[4])
Z_ext  = exp(-r_ext*Tt_ext)
# merge results
df = rbind(df, data.table(Tt = Tt_ext, Z = Z_ext, r= r_ext))
colnames(df) = c('T', 'Z(0,T)', 'r(0,T)')
# print results
print(xtable(as.data.frame(df), align = c('l', rep('c',3)), digits = c(1,1,4,4)),
file = 'tabex2.tex', type = 'latex', floating = F, include.rownames = F)
# plot results
pdf(file = 'ex3plot.pdf', width = 16, height = 9, pointsize = 18)
par(mfrow = c(1, 2), mar = c(4,4,2,1))
plot(x = df$`T`, y = df$`Z(0,T)`, type = 'b', pch = 19, lwd = 3, col = 'blue',
xlab = 'Horizon', ylab = 'Discount factor', las = 1, main = 'Discount curve', xaxt = 'n')
axis(1, df$`T`, df$`T`)
plot(x = df$`T`, y = 100*df$`r(0,T)`, type = 'b', pch = 19, lwd = 3, col = 'black',
xlab = 'Horizon', ylab = 'Interest rate, %', las = 1, main = 'Interest rate curve',
xaxt = 'n')
axis(1, df$`T`, df$`T`)
dev.off()
View(df)
c(rep(0, 3), 0.5)
install.packages(c("nleqslv", "xtable"))
set.seed(123) # set the random seed https://en.wikipedia.org/wiki/Random_seed
nPaths<-1000 # number of paths
nSteps<-252 # number of days
dw<-rnorm(nPaths*nSteps,0,1)
dw<-matrix(dw,nSteps,nPaths)
Spot<-13310
vola<-0.2
S<-Spot * exp(apply((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw,2,cumsum))
S<-rbind(rep(Spot,ncol(S)),S)
matplot(seq(1,253,1),S,type="l",lwd=2,xlab="Business days",ylab="Share price [$]",main="Random paths")
abline(v=seq(1,253,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(min(S),max(S),length.out = 15), col="lightgray", lty="dotted")
matpoints(seq(1,253,1),S,type="l",lwd=2)
View(dw)
set.seed(123) # set the random seed https://en.wikipedia.org/wiki/Random_seed
nPaths<-1000 # number of paths
nSteps<-252 # number of days
dw<-rnorm(nPaths*nSteps,0,1)
dw<-matrix(dw,nSteps,nPaths)
View(dw)
View(dw)
exp((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw)
Spot<-13310
vola<-0.2
exp((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw)
set.seed(123) # set the random seed https://en.wikipedia.org/wiki/Random_seed
nPaths<-1000 # number of paths
nSteps<-252 # number of days
dw<-rnorm(nPaths*nSteps,0,1)
dw<-matrix(dw,nSteps,nPaths)
Spot<-13310
vola<-0.2
S<-Spot * exp(apply((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw,2,cumsum))
S<-rbind(rep(Spot,ncol(S)),S)
matplot(seq(1,253,1),S,type="l",lwd=2,xlab="Business days",ylab="Share price [$]",main="Random paths")
abline(v=seq(1,253,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(min(S),max(S),length.out = 15), col="lightgray", lty="dotted")
matpoints(seq(1,253,1),S,type="l",lwd=2)
set.seed(123)
library(mvtnorm) # load library so to generate correlated random numbers with rmvnorm
sigma1<-0.3
sigma2<-0.3
rho<- 0.9
Sigma<- matrix(c(sigma1^2,rho*sigma1*sigma2,rho*sigma1*sigma2,sigma2^2), ncol=2)
dw<-rmvnorm(n = 252, mean = rep(0, nrow(Sigma)), sigma = Sigma,
method=c("eigen", "svd", "chol"), pre0.9_9994 = FALSE)
Spot1<-13310
S1<-Spot1 * exp(cumsum((-0.5*sigma1^2)*1/252 + sqrt(1/252)*dw[,1]))
S1<-c(Spot1,S1)
Spot2<-1510
S2<-Spot2 * exp(cumsum((-0.5*sigma2^2)*1/252 + sqrt(1/252)*dw[,2]))
S2<-c(Spot2,S2)
ret1<-diff(log(S1))
ret2<-diff(log(S2))
plot(ret1,ret2,ylab="Underlying returns [%]",xlab="Future contract returns [%]",
main="Log-return scatter")
abline(v=seq(-0.05,0.05,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(-0.05,0.05,length.out = 15), col="lightgray", lty="dotted")
points(ret1,ret2)
abline(a = 0, b = 1 * sign(rho), col=2, lwd=2)
nPaths<-10 # number of paths
#####################################################################
#                       Derivatives
#
# University: HEC Lausanne
# Programme: MScF
# Author: Dimitris Karyampas
# Date: 04.03.2020
#####################################################################
#####################################################################
#               Generate random paths for shares
#####################################################################
set.seed(123) # set the random seed https://en.wikipedia.org/wiki/Random_seed
nPaths<-10 # number of paths
nSteps<-252 # number of days
dw<-rnorm(nPaths*nSteps,0,1)
dw<-matrix(dw,nSteps,nPaths)
Spot<-13310
vola<-0.2
S<-Spot * exp(apply((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw,2,cumsum))
S<-rbind(rep(Spot,ncol(S)),S)
matplot(seq(1,253,1),S,type="l",lwd=2,xlab="Business days",ylab="Share price [$]",main="Random paths")
abline(v=seq(1,253,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(min(S),max(S),length.out = 15), col="lightgray", lty="dotted")
matpoints(seq(1,253,1),S,type="l",lwd=2)
#####################################################################
#       Generate correlated random paths for shares
#####################################################################
set.seed(123)
library(mvtnorm) # load library so to generate correlated random numbers with rmvnorm
sigma1<-0.3
sigma2<-0.3
rho<- 0.9
Sigma<- matrix(c(sigma1^2,rho*sigma1*sigma2,rho*sigma1*sigma2,sigma2^2), ncol=2)
dw<-rmvnorm(n = 252, mean = rep(0, nrow(Sigma)), sigma = Sigma,
method=c("eigen", "svd", "chol"), pre0.9_9994 = FALSE)
Spot1<-13310
S1<-Spot1 * exp(cumsum((-0.5*sigma1^2)*1/252 + sqrt(1/252)*dw[,1]))
S1<-c(Spot1,S1)
Spot2<-1510
S2<-Spot2 * exp(cumsum((-0.5*sigma2^2)*1/252 + sqrt(1/252)*dw[,2]))
S2<-c(Spot2,S2)
ret1<-diff(log(S1))
ret2<-diff(log(S2))
plot(ret1,ret2,ylab="Underlying returns [%]",xlab="Future contract returns [%]",
main="Log-return scatter")
abline(v=seq(-0.05,0.05,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(-0.05,0.05,length.out = 15), col="lightgray", lty="dotted")
points(ret1,ret2)
abline(a = 0, b = 1 * sign(rho), col=2, lwd=2)
#####################################################################
#                       Margining process
#####################################################################
par(mfrow=c(2,2))
set.seed(123)
nPaths<-10
nSteps<-252
dw<-rnorm(nPaths*nSteps,0,1)
dw<-matrix(dw,nSteps,nPaths)
Spot<-13310
vola<-0.2
S<-Spot * exp(apply((-0.5*vola^2)*1/252 + vola*sqrt(1/252)*dw,2,cumsum))
S<-rbind(rep(Spot,ncol(S)),S)
path<-3
plot(seq(1,nSteps+1,1),S[,path],type="l",lwd=2,xlab="Business days",ylab="Security payoff [$]",
main="Future contract price")
abline(v=seq(1,nSteps+1,length.out = 15), col="lightgray", lty="dotted")
abline(h=seq(min(S),max(S),length.out = 15), col="lightgray", lty="dotted")
points(seq(1,nSteps+1,1),S[,path],type="l",lwd=2)
IM<-23634.27988 # initial margin (retrieved from Eurex website)
MM<-0.7*IM # define Maintenance margin as 70% of Initial margin
dailyPnL<-25*diff(S[,path])  # 25 is the contract multiplier
barplot(dailyPnL,main="25 x diff(FDAX)",ylab="Profit and Loss [$]", xlab="Business days")
marginAccountBalance<-marginAccountBalanceWithoutMC<-rep(0,length(dailyPnL))
marginCall<-rep(0,length(dailyPnL))
marginAccountBalance[1]<-IM
marginAccountBalanceWithoutMC[1]<-IM
for (i in 2:(length(dailyPnL)+1)){
marginAccountBalanceWithoutMC[i]<-marginAccountBalanceWithoutMC[i-1] + dailyPnL[i-1]
marginAccountBalance[i]<-marginAccountBalance[i-1] + dailyPnL[i-1] + marginCall[i-1]
marginCall[i]<- ifelse(marginAccountBalance[i] < MM, IM - marginAccountBalance[i], 0)
}
matplot(cbind(marginAccountBalance,marginAccountBalanceWithoutMC),type="l",col=1,
main="Margin account balance [$]",ylab="Account balance [$]", xlab="Business days")
points(marginAccountBalance,type="l",col=4,lwd=2)
abline(h=IM,col=2,lwd=2)
barplot(cumsum(pmax(MM,marginAccountBalance) - marginAccountBalance),main="Cumulative margin call amount [$]",
xlab="Business days",ylab="Cumulative variation margin [$]")
#####################################################################
#                       Derivatives
#
# University: HEC Lausanne
# Programme: MScF
# Author: Dimitris Karyampas
# Date: 08.04.2020
#####################################################################
#####################################################################
#                       Binomial model
#####################################################################
u<-1.15
d<-0.9
r<-0.50/100
K<-110
S0<-100
n<-3
sharePriceTree<-function(S0,u,d,n){
S<-matrix(0,nrow = n+1, ncol = n+1)
for (i in 1:(n+1)){
for (j in 1:i){
S[i,j]<-S0 * u^(j-1) * d^((i-1)-(j-1))
}
}
return(S)
}
S<-sharePriceTree(S0,u,d,n)
binomialModel<-function(S, u, d, r, K) {
q_u = ((1+r) - d)/(u-d)
C = matrix(0, nrow=nrow(S), ncol=ncol(S))
C[nrow(C),] = pmax(S[nrow(S),] - K, 0)
for (i in (nrow(S)-1):1) {
for(j in 1:i) {
C[i, j] = (q_u*C[i+1,j+1] + (1-q_u)*C[i+1,j])/(1+r)
}
}
return(C)
}
binomialModel(S,u,d,r,K)
q_u<- ((1+r) - d)/(u-d)
i<-seq(0,n,1)
payoff<-pmax(S0*u^i*d^(n-i) - K,0)
probabilities<-(factorial(n) / (factorial(i)*factorial(n-i))) * q_u^i *(1-q_u)^(n-i)
discountFactor<-(1/(1+r)^n)
c0<-sum(discountFactor*probabilities*payoff)
c0
# Solve for alpha
a<-min(i[S0*u^i*d^(n-i) > K])
log(S0/K) > -i*log(u) - (n-i) * log(d)
log(S0/K) > -i*log(u) - n*log(d) + i*log(d)
( log(S0/K) + n*log(d) ) > -i * (  log(u) -  log(d))
aSol <-  round(-( log(S0/K) + n*log(d) )/(  log(u) -  log(d)),0)
# sum from alpha onwards
i<-seq(a,n,1)
payoff<-pmax(S0*u^i*d^(n-i) - K,0)
probabilities<-(factorial(n) / (factorial(i)*factorial(n-i))) * q_u^i *(1-q_u)^(n-i)
discountFactor<-(1/(1+r)^n)
c0Alpha<-sum(discountFactor*probabilities*payoff)
c0Alpha
# calculate with binomial distribution cumulative distribution function
c0Bin<- S0* (1-pbinom(a-1,n,(q_u*u)/(1+r))) - K/(1+r)^n * (1-pbinom(a-1,n,q_u))
c0Bin
# check the probabilities
i<-seq(a,n,1)
probabilitiesTilde<-(factorial(n) / (factorial(i)*factorial(n-i))) * ((q_u*u)/(1+r))^i *(1-(q_u*u)/(1+r))^(n-i)
sum(probabilitiesTilde)
1-pbinom(a-1,n,(q_u*u)/(1+r))
probabilities<-(factorial(n) / (factorial(i)*factorial(n-i))) * q_u^i *(1-q_u)^(n-i)
sum(probabilities)
1-pbinom(a-1,n,q_u)
#####################################################################
#               Binomial model with volatility
#####################################################################
sigma<-0.2
h<- 1/260 # daily steps
u<-exp(sigma*sqrt(h))
d<-1/u
r<-0.50/100
K<-110
S0<-100
n<-50
par(mfrow=c(1,2))
S<-sharePriceTree(S0,u,d,n)
plot(seq(0,n,1),rep(S[1,1],n+1),type="l",ylim=c(50,300),main="Symmetric tree",
xlab="Business days", ylab="Share price [$]",lwd=2)
for (i in 1:n){
points(rep(i,length(S[i+1,1:(i+1)])),S[i+1,1:(i+1)],col=i,pch=20)
}
u<-(1+r)*(1 + sqrt(exp(sigma^2*h)-1))
d<-(1+r)*(1 - sqrt(exp(sigma^2*h)-1))
S<-sharePriceTree(S0,u,d,n)
plot(seq(0,n,1),rep(S[1,1],n+1),type="l",ylim=c(50,300),main="Non-symmetric tree",
xlab="Business days", ylab="Share price [$]",lwd=2)
for (i in 1:n){
points(rep(i,length(S[i+1,1:(i+1)])),S[i+1,1:(i+1)],col=i,pch=20)
}
A = matrix(c(2,1,-2, 1,2,-2,-2,-2,5), 3,3 byrow=TRUE)
A = matrix(c(2,1,-2, 1,2,-2,-2,-2,5), 3,3 ,byrow=TRUE)
A
eigen(A)
A$vector
A$vectors
B =eigen(A)
B$vectors
B =eigen(A, symmetric = TRUE)
B
t(B$vectors)*eye(3,3)*B$values*B$vectors
t(B$vectors)*diag(3)*B$values*B$vectors
B$vectors*diag(3)*B$values*t(B$vectors)
diag(3)*B$values
B$vectors
B$vectors%*%diag(3)%*%t(B$vectors)
t(B$vectors)%*%diag(3)%*%B$vectors
t(B$vectors)%*%(diag(3)*B$values)%*%B$vectors
B$vectors%*%(diag(3)*B$values)%*%t(B$vectors)
install.packages(c("backports", "BH", "boot", "car", "carData", "caTools", "class", "cli", "clipr", "codetools", "colorspace", "crayon", "data.table", "digest", "ellipse", "ellipsis", "excelR", "FactoMineR", "fansi", "farver", "fBasics", "forcats", "ggplot2", "ggrepel", "ghyp", "glue", "gplots", "gss", "gtools", "haven", "hms", "htmltools", "htmlwidgets", "jsonlite", "KernSmooth", "knitr", "labeling", "LaplacesDemon", "lattice", "leaps", "lifecycle", "lme4", "magrittr", "maptools", "MASS", "Matrix", "mgcv", "mime", "mvtnorm", "nlme", "nloptr", "nnet", "openxlsx", "pbkrtest", "PerformanceAnalytics", "pillar", "plyr", "pracma", "prettyunits", "purrr", "quantmod", "quantreg", "R6", "Rcpp", "RcppEigen", "readr", "reshape2", "RiskPortfolios", "rlang", "rmarkdown", "scales", "sp", "spatial", "stringi", "survival", "tibble", "tidyselect", "timeSeries", "tinytex", "TTR", "vctrs", "withr", "xfun", "xts", "yaml", "zip", "zoo"))
q()
install.packages("plm")
install.packages("plm")
install.packages( 'plm' )
install.packages("plm",type="win.binary")
install.packages("~/Desktop/plm_2.6-2.tar", repos = NULL)
install.packages("~/Desktop/plm_2.6-2.tar")
install.packages("~/Desktop/plm_2.6-2.tar")
library( plm )
install.packages(plm)
install.packages('plm')
install.packages('collapse')
install.packages('lmtest')
install.packages('plm')
install.packages('plm')
install.packages('collapse')
library(data.table)
library(readxl)
install.packages('plm')
install.packages("~/Desktop/collapse_1.8.9.tar", repos = NULL)
install.packages("~/Desktop/collapse_1.8.9.tar")
load("~/Documents/Université/HEC/PhD/6.1/FE I/HW3/.RData")
q()
library(dplyr)
library(data.table)
library( plm )
library( stargazer )
library(lmtest)
library(sandwich)
#pd <- import("pandas")
#pickle_data <- pd$read_pickle("dataset.pickle")
dataTable = as.data.frame( fread( "Data/benchmark.csv" ) ) # import data
setwd("~/Documents/Université/HEC/PhD/6.2/EAP/HW/EAP_HWII")
library(dplyr)
library(data.table)
library( plm )
library( stargazer )
library(lmtest)
library(sandwich)
#pd <- import("pandas")
#pickle_data <- pd$read_pickle("dataset.pickle")
dataTable = as.data.frame( fread( "Data/benchmark.csv" ) ) # import data
dataTable$er = dataTable$er*100
View(dataTable)
View(dataTable)
